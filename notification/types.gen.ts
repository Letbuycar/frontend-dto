// This file is auto-generated by @hey-api/openapi-ts

export type ContactCreate = {
    name?: (string | null);
    email?: (string | null);
    phone?: (string | null);
    message?: (string | null);
};

export type ContactSchema = {
    name?: (string | null);
    email?: (string | null);
    phone?: (string | null);
    message?: (string | null);
    id: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type NOTIFICATION_EVENT = 'created_by_manager' | 'accountant_tariff_approved' | 'logist_ports_approved' | 'payment_auction_success' | 'payment_success' | 'accountant_payment_approved' | 'logist_car_arived_to_storage' | 'logist_added_car_photo' | 'logist_car_to_shipment' | 'company_invoice_not_paid' | 'logist_gives_delivary_info' | 'no_cargo_doc' | 'have_cargo_doc' | 'broker_check_doc' | 'broker_create_duties_fee' | 'dealer_paid_duties_fee' | 'dealer_put_date' | 'no_delivery_info' | 'delivered_to_customer' | 'success' | 'got_complaint' | 'complaint_resolved' | 'complaint_not_resolved';

export type NOTIFICATION_EVENT_ACCOUNTANT = 'company_invoice_not_paid';

export type NOTIFICATION_EVENT_BROKER = 'no_cargo_doc' | 'no_delivery_info';

export type NOTIFICATION_SERVICE = 'cargo' | 'finance' | 'storage' | 'pdf' | 'notification';

export type NotificationCreate = {
    cargo_id: number;
    notification_event: (NOTIFICATION_EVENT | null);
    notification_service?: (NOTIFICATION_SERVICE | null);
    user_role?: (UserRole | null);
};

export type NotificationCreateAccountant = {
    cargo_id: number;
    notification_event: NOTIFICATION_EVENT_ACCOUNTANT;
};

export type NotificationCreateAuth = {
    email?: (string | null);
    title?: (string | null);
    message?: (string | null);
    code?: (string | null);
};

export type NotificationCreateBroker = {
    cargo_id: number;
    notification_event: NOTIFICATION_EVENT_BROKER;
};

export type NotificationSchema = {
    cargo_id: number;
    notification_event: (NOTIFICATION_EVENT | null);
    notification_service?: (NOTIFICATION_SERVICE | null);
    user_role?: (UserRole | null);
    id?: (number | null);
    user_id?: (string | null);
    email?: (string | null);
    title?: (string | null);
    message?: (string | null);
    url?: (string | null);
    is_email_sent?: (boolean | null);
    is_active?: (boolean | null);
    updated_on: string;
    created_on: string;
};

export type PaginationSchema_ContactSchema_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<ContactSchema>;
};

export type PaginationSchema_NotificationSchema_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<NotificationSchema>;
};

export type UserRole = 'Admin' | 'Manager' | 'Accountant' | 'Dealer' | 'Logistician' | 'Broker' | 'Expeditor' | 'Customer' | 'Robot';

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CreateNotificationApiV1NotificationPostData = {
    body: NotificationCreate;
};

export type CreateNotificationApiV1NotificationPostResponse = (NotificationSchema);

export type CreateNotificationApiV1NotificationPostError = (HTTPValidationError);

export type GetNotificationsApiV1NotificationGetData = {
    query?: {
        page?: number;
    };
};

export type GetNotificationsApiV1NotificationGetResponse = (PaginationSchema_NotificationSchema_);

export type GetNotificationsApiV1NotificationGetError = (HTTPValidationError);

export type CreateNotificationByAccountantApiV1NotificationAccountantPostData = {
    body: NotificationCreateAccountant;
};

export type CreateNotificationByAccountantApiV1NotificationAccountantPostResponse = (NotificationSchema);

export type CreateNotificationByAccountantApiV1NotificationAccountantPostError = (HTTPValidationError);

export type CreateNotificationByBrokerApiV1NotificationBrokerPostData = {
    body: NotificationCreateBroker;
};

export type CreateNotificationByBrokerApiV1NotificationBrokerPostResponse = (NotificationSchema);

export type CreateNotificationByBrokerApiV1NotificationBrokerPostError = (HTTPValidationError);

export type CreateNotificationAuthApiV1NotificationAuthPostData = {
    body: NotificationCreateAuth;
};

export type CreateNotificationAuthApiV1NotificationAuthPostResponse = (unknown);

export type CreateNotificationAuthApiV1NotificationAuthPostError = (HTTPValidationError);

export type GetSingleNotificationApiV1NotificationNotificationIdGetData = {
    path: {
        notification_id: number;
    };
};

export type GetSingleNotificationApiV1NotificationNotificationIdGetResponse = (NotificationSchema);

export type GetSingleNotificationApiV1NotificationNotificationIdGetError = (HTTPValidationError);

export type DeleteNotificationApiV1NotificationNotificationIdDeleteData = {
    path: {
        notification_id: number;
    };
};

export type DeleteNotificationApiV1NotificationNotificationIdDeleteResponse = (PaginationSchema_NotificationSchema_);

export type DeleteNotificationApiV1NotificationNotificationIdDeleteError = (HTTPValidationError);

export type GetNotificationsAllApiV1NotificationAllGetData = {
    query?: {
        cargo_id?: string;
        page?: number;
        user_id?: string;
    };
};

export type GetNotificationsAllApiV1NotificationAllGetResponse = (PaginationSchema_NotificationSchema_);

export type GetNotificationsAllApiV1NotificationAllGetError = (HTTPValidationError);

export type CreateContactApiV1ContactPostData = {
    body: ContactCreate;
};

export type CreateContactApiV1ContactPostResponse = (ContactCreate);

export type CreateContactApiV1ContactPostError = (HTTPValidationError);

export type GetContactsApiV1ContactGetData = {
    query?: {
        page?: number;
    };
};

export type GetContactsApiV1ContactGetResponse = (PaginationSchema_ContactSchema_);

export type GetContactsApiV1ContactGetError = (HTTPValidationError);

export type GetContactApiV1ContactContactIdGetData = {
    path: {
        contact_id: number;
    };
};

export type GetContactApiV1ContactContactIdGetResponse = (ContactSchema);

export type GetContactApiV1ContactContactIdGetError = (HTTPValidationError);

export type RootGetResponse = (unknown);

export type RootGetError = unknown;