// This file is auto-generated by @hey-api/openapi-ts

export type Auction = {
    title?: (string | null);
    payment_account?: (string | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
};

export type AuctionCreate = {
    title?: (string | null);
    payment_account?: (string | null);
};

export type AuctionFee = {
    fee_type?: (FEE_TYPE_ENUM | null);
    min_price?: (number | null);
    max_price?: (number | null);
    amount?: (number | null);
    percent?: (number | null);
    auction_id?: (number | null);
    id: number;
    auction?: (Auction | null);
};

export type AuctionFeeCreate = {
    fee_type?: (FEE_TYPE_ENUM | null);
    min_price?: (number | null);
    max_price?: (number | null);
    amount?: (number | null);
    percent?: (number | null);
    auction_id?: (number | null);
};

export type AuctionFeeUpdate = {
    fee_type?: (FEE_TYPE_ENUM | null);
    min_price?: (number | null);
    max_price?: (number | null);
    amount?: (number | null);
    percent?: (number | null);
    auction_id?: (number | null);
};

export type AuctionUpdate = {
    title?: (string | null);
    payment_account?: (string | null);
    is_active?: (boolean | null);
};

export type BoatType = {
    title?: (string | null);
    is_active?: (boolean | null);
    id: number;
    updated_on: string;
    created_on: string;
};

export type BoatTypeCreate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type BoatTypeUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type BodyType = {
    title?: (string | null);
    is_active?: (boolean | null);
    id: number;
    updated_on: string;
    created_on: string;
};

export type BodyTypeCreate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type BodyTypeUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type CARGO_STATUS = 'created_by_manager' | 'accountant_tariff_approved' | 'logist_ports_approved' | 'payment_auction_success' | 'payment_success' | 'accountant_payment_approved' | 'logist_car_arived_to_storage' | 'logist_added_car_photo' | 'logist_car_to_shipment' | 'company_invoice_not_paid' | 'logist_gives_delivary_info' | 'no_cargo_doc' | 'have_cargo_doc' | 'broker_check_doc' | 'broker_create_duties_fee' | 'dealer_paid_duties_fee' | 'dealer_put_date' | 'success';

export type CARGO_STATUS_BROKER_GET = 'no_cargo_doc' | 'broker_check_doc' | 'have_cargo_doc' | 'success';

export type CARGO_STATUS_BROKER_UPDATE = 'no_cargo_doc' | 'broker_check_doc' | 'success';

export type CARGO_STATUS_LOGIST = 'logist_car_arived_to_storage' | 'logist_car_to_shipment';

export type CARGO_STATUS_MANAGER = 'success';

export type CARGO_TYPE = 'car' | 'crossover' | 'moto' | 'boat' | 'extra_large_auto' | 'special_equipment';

export type CarBrand = {
    title?: (string | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
};

export type CarBrandCreate = {
    title?: (string | null);
};

export type CarBrandUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type CarModel = {
    title?: (string | null);
    brand_id?: (number | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
    brand?: (CarBrand | null);
};

export type CarModelCreate = {
    title?: (string | null);
    brand_id?: (number | null);
};

export type CarModelUpdate = {
    title?: (string | null);
    brand_id?: (number | null);
    is_active?: (boolean | null);
};

export type Cargo = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    id: number;
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    duties_invoice_file_id?: (string | null);
    duties_receipt_file_id?: (string | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
};

export type CargoAccountant = {
    id: number;
    vin_code?: (string | null);
    dealer_id?: (string | null);
    sublot?: (number | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    duties_invoice_file_id?: (string | null);
    duties_receipt_file_id?: (string | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    total_amount?: (number | null);
    paid_amount?: (number | null);
    left_to_pay_amount?: (number | null);
    is_auction_paid?: (boolean | null);
    status_list?: (Array<(string)> | null);
};

export type CargoAccountantUpdate = {
    id: number;
    vin_code?: string;
    dealer_id?: string;
    sublot?: (number | null);
    is_archived?: (boolean | null);
};

export type CargoAdmin = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    container_number?: (string | null);
    broker_id?: (string | null);
    sublot?: (number | null);
    id: number;
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    duties_invoice_file_id?: (string | null);
    duties_receipt_file_id?: (string | null);
};

export type CargoAdminCreate = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    container_number?: (string | null);
    broker_id?: (string | null);
    sublot?: (number | null);
};

export type CargoAdminUpdate = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    is_active?: (boolean | null);
    sublot?: (number | null);
};

export type CargoBroker = {
    duties_amount?: (number | null);
    duties_receipt_file_id?: (string | null);
    duties_receipt_file_ids?: (Array<(string)> | null);
    duties_invoice_file_id?: (string | null);
    is_duties_paid?: (boolean | null);
    final_receiver_name?: (string | null);
    delivery_comment?: (string | null);
    date_receive?: (string | null);
    port_photos_link?: (string | null);
    status?: (CARGO_STATUS_BROKER_GET | null);
    is_archived?: (boolean | null);
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    id: number;
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
};

export type CargoBrokerUpdate = {
    duties_amount?: (number | null);
    duties_receipt_file_id?: (string | null);
    duties_receipt_file_ids?: (Array<(string)> | null);
    duties_invoice_file_id?: (string | null);
    is_duties_paid?: (boolean | null);
    final_receiver_name?: (string | null);
    delivery_comment?: (string | null);
    date_receive?: (string | null);
    port_photos_link?: (string | null);
    status?: (CARGO_STATUS_BROKER_UPDATE | null);
    is_archived?: (boolean | null);
};

export type CargoDealer = {
    cost_dealer_add_buy?: (number | null);
    cost_dealer_add_service?: (number | null);
    invoice_name?: (string | null);
    invoice_company?: (string | null);
    invoice_address?: (string | null);
    invoice_passport?: (string | null);
    duties_receipt_file_id?: (string | null);
    duties_receipt_file_ids?: (Array<(string)> | null);
    duties_invoice_file_id?: (string | null);
    is_duties_paid?: (boolean | null);
    final_receiver_name?: (string | null);
    delivery_comment?: (string | null);
    date_receive?: (string | null);
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    id: number;
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    duties_amount?: (number | null);
    duties_receipt_file_path?: (number | null);
};

export type CargoDealerUpdate = {
    cost_dealer_add_buy?: (number | null);
    cost_dealer_add_service?: (number | null);
    invoice_name?: (string | null);
    invoice_company?: (string | null);
    invoice_address?: (string | null);
    invoice_passport?: (string | null);
    duties_receipt_file_id?: (string | null);
    duties_receipt_file_ids?: (Array<(string)> | null);
    duties_invoice_file_id?: (string | null);
    is_duties_paid?: (boolean | null);
    final_receiver_name?: (string | null);
    delivery_comment?: (string | null);
    date_receive?: (string | null);
};

export type CargoDocsAccess = {
    cargo_id: number;
    user_id: string;
    doc_type: DOCS_TYPE;
};

export type CargoForInvoiceSchema = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    id: number;
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    duties_invoice_file_id?: (string | null);
    duties_receipt_file_id?: (string | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    cost_dealer_add_buy?: (number | null);
    cost_dealer_add_service?: (number | null);
    invoice_name?: (string | null);
    invoice_company?: (string | null);
    invoice_address?: (string | null);
    invoice_passport?: (string | null);
    manager_id?: (string | null);
    logistician_id?: (string | null);
    accountant_id?: (string | null);
    broker_id?: (string | null);
};

export type CargoLogistician = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    id: number;
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    duties_invoice_file_id?: (string | null);
    duties_receipt_file_id?: (string | null);
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    container_number?: (string | null);
    broker_id?: (string | null);
    status?: (CARGO_STATUS_LOGIST | null);
};

export type CargoLogisticianUpdate = {
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    container_number?: (string | null);
    container_id?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    broker_id?: (string | null);
    booking_number?: (string | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    status?: (CARGO_STATUS_LOGIST | null);
};

export type CargoManager = {
    date_arived_to_storage?: (string | null);
    date_to_container?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    container_number?: (string | null);
    container_id?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    broker_id?: (string | null);
    booking_number?: (string | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    status?: (CARGO_STATUS_MANAGER | null);
    id: number;
    vin_code?: (string | null);
    dealer_id?: (string | null);
    sublot?: (number | null);
    year?: (number | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    is_active?: (boolean | null);
    updated_on?: (string | null);
    created_on?: (string | null);
    car_brand?: (CarBrand | null);
    car_model?: (CarModel | null);
    container?: (Container | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    fuel_type?: (FuelType | null);
    engine_volume?: (EngineVolume | null);
    body_type?: (BodyType | null);
    country?: (Country | null);
    auction?: (Auction | null);
    transmission?: (Transmission | null);
    location?: (LocationFrom | null);
    port_photos_link?: (string | null);
    duties_invoice_file_id?: (string | null);
    duties_receipt_file_id?: (string | null);
    total_amount?: (number | null);
    paid_amount?: (number | null);
    left_to_pay_amount?: (number | null);
    is_auction_paid?: (boolean | null);
};

export type CargoManagerCreate = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    manager_id?: (string | null);
    sublot?: (number | null);
};

export type CargoManagerUpdate = {
    vin_code?: (string | null);
    year?: (number | null);
    carrier_title?: (string | null);
    ship_title?: (string | null);
    booking_number?: (string | null);
    date_to_shipment?: (string | null);
    date_arrive_shipment?: (string | null);
    is_closed_location?: (boolean | null);
    is_doc_change?: (boolean | null);
    cargo_type?: (CARGO_TYPE | null);
    participent_number?: (number | null);
    lot_number?: (number | null);
    is_photos?: (boolean | null);
    dealer_id?: (string | null);
    car_brand_id?: (number | null);
    car_model_id?: (number | null);
    container_id?: (number | null);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    fuel_type_id?: (number | null);
    engine_volume_id?: (number | null);
    body_type_id?: (number | null);
    country_id?: (number | null);
    auction_id?: (number | null);
    transmission_id?: (number | null);
    location_id?: (number | null);
    date_buy?: (string | null);
    is_archived?: (boolean | null);
    sublot?: (number | null);
    status?: (CARGO_STATUS_MANAGER | null);
};

export type CargoSetIsPhotos = {
    cargo_id?: (number | null);
    vin_code?: (string | null);
    is_photos?: (boolean | null);
    is_docs_uploaded?: (boolean | null);
};

export type City = {
    title?: (string | null);
    is_active?: (boolean | null);
    id: number;
    updated_on: string;
    created_on: string;
};

export type CityCreate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type CityUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type Container = {
    number?: (string | null);
    konosament_file_id?: (string | null);
    waybill_file_id?: (string | null);
    date_arrive?: (string | null);
    is_archived?: (boolean | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
};

export type ContainerCargo = {
    id: number;
    vin_code?: (string | null);
};

export type ContainerCreate = {
    number?: (string | null);
    konosament_file_id?: (string | null);
    waybill_file_id?: (string | null);
    date_arrive?: (string | null);
    is_archived?: (boolean | null);
};

export type ContainerFull = {
    number?: (string | null);
    konosament_file_id?: (string | null);
    waybill_file_id?: (string | null);
    date_arrive?: (string | null);
    is_archived?: (boolean | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
    cargo?: (Array<ContainerCargo> | null);
};

export type ContainerUpdate = {
    number?: (string | null);
    konosament_file_id?: (string | null);
    waybill_file_id?: (string | null);
    date_arrive?: (string | null);
    is_archived?: (boolean | null);
    is_active?: (boolean | null);
};

export type Country = {
    title?: (string | null);
    is_active?: (boolean | null);
    id: number;
    updated_on?: string;
    created_on?: string;
};

export type CountryCreate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type CountryUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type DOCS_TYPE = 'invoice' | 'duty_receipt' | 'cargo_docs' | 'user_docs' | 'payment' | 'container';

export type EngineVolume = {
    title?: (string | null);
    id: number;
    volume?: (number | null);
    is_active: boolean;
    updated_on: string;
    created_on: string;
};

export type EngineVolumeCreate = {
    title?: (string | null);
};

export type EngineVolumeUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type FEE_TYPE_ENUM = 'standart' | 'virtual' | 'service';

export type FUEL_TYPE = 'petrol' | 'diesel' | 'electric' | 'hybrid' | 'lpg' | 'cng' | 'other';

export type FuelType = {
    title?: (string | null);
    is_active?: (boolean | null);
    fuel_type?: (FUEL_TYPE | null);
    id: number;
    updated_on: string;
    created_on: string;
};

export type FuelTypeCreate = {
    title?: (string | null);
    is_active?: (boolean | null);
    fuel_type?: (FUEL_TYPE | null);
};

export type FuelTypeUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
    fuel_type?: (FUEL_TYPE | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LocationFrom = {
    title?: (string | null);
    port_ids?: (Array<unknown> | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
};

export type LocationFromCreate = {
    title?: (string | null);
    port_ids?: (Array<unknown> | null);
};

export type LocationFromUpdate = {
    title?: (string | null);
    port_ids?: (Array<unknown> | null);
    is_active?: (boolean | null);
};

export type OverlandTariff = {
    price?: string;
    location_id?: (number | null);
    port_id?: (number | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
    location?: (LocationFrom | null);
    port?: (PortFrom | null);
};

export type OverlandTariffCreate = {
    price?: (number | string);
    location_id?: (number | null);
    port_id?: (number | null);
};

export type OverlandTariffUpdate = {
    price?: (number | string);
    location_id?: (number | null);
    port_id?: (number | null);
    is_active?: (boolean | null);
};

export type OverseaTariff = {
    price?: string;
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
};

export type OverseaTariffCreate = {
    price?: (number | string);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
};

export type OverseaTariffUpdate = {
    price?: (number | string);
    port_from_id?: (number | null);
    port_to_id?: (number | null);
    is_active?: (boolean | null);
};

export type PaginationSchema_AuctionFee_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<AuctionFee>;
};

export type PaginationSchema_Auction_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<Auction>;
};

export type PaginationSchema_BodyType_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<BodyType>;
};

export type PaginationSchema_CarBrand_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CarBrand>;
};

export type PaginationSchema_CarModel_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CarModel>;
};

export type PaginationSchema_CargoAccountant_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CargoAccountant>;
};

export type PaginationSchema_CargoAdmin_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CargoAdmin>;
};

export type PaginationSchema_CargoBroker_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CargoBroker>;
};

export type PaginationSchema_CargoDealer_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CargoDealer>;
};

export type PaginationSchema_CargoLogistician_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CargoLogistician>;
};

export type PaginationSchema_CargoManager_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<CargoManager>;
};

export type PaginationSchema_City_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<City>;
};

export type PaginationSchema_Container_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<Container>;
};

export type PaginationSchema_Country_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<Country>;
};

export type PaginationSchema_EngineVolume_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<EngineVolume>;
};

export type PaginationSchema_FuelType_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<FuelType>;
};

export type PaginationSchema_LocationFrom_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<LocationFrom>;
};

export type PaginationSchema_OverlandTariff_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<OverlandTariff>;
};

export type PaginationSchema_OverseaTariff_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<OverseaTariff>;
};

export type PaginationSchema_PortFrom_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<PortFrom>;
};

export type PaginationSchema_PortTo_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<PortTo>;
};

export type PaginationSchema_Transmission_ = {
    total: number;
    page: number;
    total_pages: number;
    items: Array<Transmission>;
};

export type PortFrom = {
    title?: (string | null);
    address?: (string | null);
    zipcode?: (string | null);
    id: number;
    is_active: boolean;
    updated_on: string;
    created_on: string;
};

export type PortFromCreate = {
    title?: (string | null);
    address?: (string | null);
    zipcode?: (string | null);
};

export type PortFromUpdate = {
    title?: (string | null);
    address?: (string | null);
    zipcode?: (string | null);
    is_active?: (boolean | null);
};

export type PortTo = {
    title?: (string | null);
    country_id?: (number | null);
    is_active?: (boolean | null);
    id?: number;
    country?: (Country | null);
    updated_on?: string;
    created_on?: string;
};

export type PortToCreate = {
    title?: (string | null);
    country_id?: (number | null);
    is_active?: (boolean | null);
};

export type PortToUpdate = {
    title?: (string | null);
    country_id?: (number | null);
    is_active?: (boolean | null);
};

export type Tariff = {
    land?: (string | null);
    sea?: (string | null);
};

export type TariffTotal = {
    land?: (string | null);
    sea?: (string | null);
    fee?: (string | null);
    duty?: (string | null);
    excise?: (string | null);
    vat?: (string | null);
    price?: (string | null);
    total?: (string | null);
    cargo_type?: (CARGO_TYPE | null);
    auction?: (Auction | null);
    location?: (LocationFrom | null);
    port_from?: (PortFrom | null);
    port_to?: (PortTo | null);
    country?: (Country | null);
};

export type Transmission = {
    title?: (string | null);
    is_active?: (boolean | null);
    id: number;
    updated_on: string;
    created_on: string;
};

export type TransmissionCreate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type TransmissionUpdate = {
    title?: (string | null);
    is_active?: (boolean | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ReadAuctionsApiV1AuctionsGetData = {
    query?: {
        page?: number;
    };
};

export type ReadAuctionsApiV1AuctionsGetResponse = (PaginationSchema_Auction_);

export type ReadAuctionsApiV1AuctionsGetError = (HTTPValidationError);

export type CreateNewAuctionApiV1AuctionsPostData = {
    body: AuctionCreate;
};

export type CreateNewAuctionApiV1AuctionsPostResponse = (Auction);

export type CreateNewAuctionApiV1AuctionsPostError = (HTTPValidationError);

export type ReadAuctionApiV1AuctionsAuctionIdGetData = {
    path: {
        auction_id: number;
    };
};

export type ReadAuctionApiV1AuctionsAuctionIdGetResponse = (Auction);

export type ReadAuctionApiV1AuctionsAuctionIdGetError = (HTTPValidationError);

export type UpdateExistingAuctionApiV1AuctionsAuctionIdPutData = {
    body: AuctionUpdate;
    path: {
        auction_id: number;
    };
};

export type UpdateExistingAuctionApiV1AuctionsAuctionIdPutResponse = (Auction);

export type UpdateExistingAuctionApiV1AuctionsAuctionIdPutError = (HTTPValidationError);

export type DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteData = {
    path: {
        auction_id: number;
    };
};

export type DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteResponse = (Auction);

export type DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteError = (HTTPValidationError);

export type ReadAuctionFeesApiV1AuctionFeesGetData = {
    query?: {
        page?: number;
    };
};

export type ReadAuctionFeesApiV1AuctionFeesGetResponse = (PaginationSchema_AuctionFee_);

export type ReadAuctionFeesApiV1AuctionFeesGetError = (HTTPValidationError);

export type CreateNewAuctionfeeApiV1AuctionFeesPostData = {
    body: AuctionFeeCreate;
};

export type CreateNewAuctionfeeApiV1AuctionFeesPostResponse = (AuctionFee);

export type CreateNewAuctionfeeApiV1AuctionFeesPostError = (HTTPValidationError);

export type ReadAuctionfeeApiV1AuctionFeesAuctionfeeIdGetData = {
    path: {
        auctionfee_id: number;
    };
};

export type ReadAuctionfeeApiV1AuctionFeesAuctionfeeIdGetResponse = (AuctionFee);

export type ReadAuctionfeeApiV1AuctionFeesAuctionfeeIdGetError = (HTTPValidationError);

export type UpdateExistingAuctionApiV1AuctionFeesAuctionfeeIdPutData = {
    body: AuctionFeeUpdate;
    path: {
        auctionfee_id: number;
    };
};

export type UpdateExistingAuctionApiV1AuctionFeesAuctionfeeIdPutResponse = (AuctionFee);

export type UpdateExistingAuctionApiV1AuctionFeesAuctionfeeIdPutError = (HTTPValidationError);

export type DeleteExistingAuctionfeeApiV1AuctionFeesAuctionfeeIdDeleteData = {
    path: {
        auctionfee_id: number;
    };
};

export type DeleteExistingAuctionfeeApiV1AuctionFeesAuctionfeeIdDeleteResponse = (AuctionFee);

export type DeleteExistingAuctionfeeApiV1AuctionFeesAuctionfeeIdDeleteError = (HTTPValidationError);

export type ReadBoatTypesApiV1BoatTypesGetData = {
    headers?: {
        'Content-Language'?: string;
    };
};

export type ReadBoatTypesApiV1BoatTypesGetResponse = (Array<BoatType>);

export type ReadBoatTypesApiV1BoatTypesGetError = (HTTPValidationError);

export type CreateBoatTypeApiV1BoatTypesPostData = {
    body: BoatTypeCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreateBoatTypeApiV1BoatTypesPostResponse = (BoatType);

export type CreateBoatTypeApiV1BoatTypesPostError = (HTTPValidationError);

export type ReadBoatTypeApiV1BoatTypesBodyTypeIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        body_type_id: number;
    };
};

export type ReadBoatTypeApiV1BoatTypesBodyTypeIdGetResponse = (BoatType);

export type ReadBoatTypeApiV1BoatTypesBodyTypeIdGetError = (HTTPValidationError);

export type UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutData = {
    body: BoatTypeUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        body_type_id: number;
    };
};

export type UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutResponse = (BoatType);

export type UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutError = (HTTPValidationError);

export type DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        body_type_id: number;
    };
};

export type DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteResponse = (BoatType);

export type DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteError = (HTTPValidationError);

export type ReadBodyTypesApiV1BodyTypesGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    query?: {
        page?: number;
    };
};

export type ReadBodyTypesApiV1BodyTypesGetResponse = (PaginationSchema_BodyType_);

export type ReadBodyTypesApiV1BodyTypesGetError = (HTTPValidationError);

export type CreateBodyTypeApiV1BodyTypesPostData = {
    body: BodyTypeCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreateBodyTypeApiV1BodyTypesPostResponse = (BodyType);

export type CreateBodyTypeApiV1BodyTypesPostError = (HTTPValidationError);

export type ReadBodyTypeApiV1BodyTypesBodyTypeIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        body_type_id: number;
    };
};

export type ReadBodyTypeApiV1BodyTypesBodyTypeIdGetResponse = (BodyType);

export type ReadBodyTypeApiV1BodyTypesBodyTypeIdGetError = (HTTPValidationError);

export type UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutData = {
    body: BodyTypeUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        body_type_id: number;
    };
};

export type UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutResponse = (BodyType);

export type UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutError = (HTTPValidationError);

export type DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        body_type_id: number;
    };
};

export type DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteResponse = (boolean);

export type DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteError = (HTTPValidationError);

export type ReadCarBrandsApiV1CarBrandsGetData = {
    query?: {
        page?: number;
    };
};

export type ReadCarBrandsApiV1CarBrandsGetResponse = (PaginationSchema_CarBrand_);

export type ReadCarBrandsApiV1CarBrandsGetError = (HTTPValidationError);

export type CreateNewCarBrandApiV1CarBrandsPostData = {
    body: CarBrandCreate;
};

export type CreateNewCarBrandApiV1CarBrandsPostResponse = (CarBrand);

export type CreateNewCarBrandApiV1CarBrandsPostError = (HTTPValidationError);

export type ReadCarBrandApiV1CarBrandsCarBrandIdGetData = {
    path: {
        car_brand_id: number;
    };
};

export type ReadCarBrandApiV1CarBrandsCarBrandIdGetResponse = (CarBrand);

export type ReadCarBrandApiV1CarBrandsCarBrandIdGetError = (HTTPValidationError);

export type UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutData = {
    body: CarBrandUpdate;
    path: {
        car_brand_id: number;
    };
};

export type UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutResponse = (CarBrand);

export type UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutError = (HTTPValidationError);

export type DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteData = {
    path: {
        car_brand_id: number;
    };
};

export type DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteResponse = (CarBrand);

export type DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteError = (HTTPValidationError);

export type ReadCarModelsApiV1CarModelsGetData = {
    query?: {
        car_brand_id?: number;
        page?: number;
    };
};

export type ReadCarModelsApiV1CarModelsGetResponse = (PaginationSchema_CarModel_);

export type ReadCarModelsApiV1CarModelsGetError = (HTTPValidationError);

export type CreateNewCarModelApiV1CarModelsPostData = {
    body: CarModelCreate;
};

export type CreateNewCarModelApiV1CarModelsPostResponse = (CarModel);

export type CreateNewCarModelApiV1CarModelsPostError = (HTTPValidationError);

export type ReadCarModelApiV1CarModelsCarModelIdGetData = {
    path: {
        car_model_id: number;
    };
};

export type ReadCarModelApiV1CarModelsCarModelIdGetResponse = (CarModel);

export type ReadCarModelApiV1CarModelsCarModelIdGetError = (HTTPValidationError);

export type UpdateExistingCarModelApiV1CarModelsCarModelIdPutData = {
    body: CarModelUpdate;
    path: {
        car_model_id: number;
    };
};

export type UpdateExistingCarModelApiV1CarModelsCarModelIdPutResponse = (CarModel);

export type UpdateExistingCarModelApiV1CarModelsCarModelIdPutError = (HTTPValidationError);

export type DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteData = {
    path: {
        car_model_id: number;
    };
};

export type DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteResponse = (CarModel);

export type DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteError = (HTTPValidationError);

export type ReadEngineVolumesApiV1EngineVolumesGetData = {
    query?: {
        page?: number;
    };
};

export type ReadEngineVolumesApiV1EngineVolumesGetResponse = (PaginationSchema_EngineVolume_);

export type ReadEngineVolumesApiV1EngineVolumesGetError = (HTTPValidationError);

export type CreateNewEngineVolumeApiV1EngineVolumesPostData = {
    body: EngineVolumeCreate;
};

export type CreateNewEngineVolumeApiV1EngineVolumesPostResponse = (EngineVolume);

export type CreateNewEngineVolumeApiV1EngineVolumesPostError = (HTTPValidationError);

export type ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetData = {
    path: {
        engine_volume_id: number;
    };
};

export type ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetResponse = (EngineVolume);

export type ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetError = (HTTPValidationError);

export type UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutData = {
    body: EngineVolumeUpdate;
    path: {
        engine_volume_id: number;
    };
};

export type UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutResponse = (EngineVolume);

export type UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutError = (HTTPValidationError);

export type DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteData = {
    path: {
        engine_volume_id: number;
    };
};

export type DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteResponse = (EngineVolume);

export type DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteError = (HTTPValidationError);

export type ReadFuelTypesApiV1FuelTypesGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    query?: {
        page?: number;
    };
};

export type ReadFuelTypesApiV1FuelTypesGetResponse = (PaginationSchema_FuelType_);

export type ReadFuelTypesApiV1FuelTypesGetError = (HTTPValidationError);

export type CreateFuelTypeApiV1FuelTypesPostData = {
    body: FuelTypeCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreateFuelTypeApiV1FuelTypesPostResponse = (FuelType);

export type CreateFuelTypeApiV1FuelTypesPostError = (HTTPValidationError);

export type ReadFuelTypeApiV1FuelTypesFuelTypeIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        fuel_type_id: number;
    };
};

export type ReadFuelTypeApiV1FuelTypesFuelTypeIdGetResponse = (FuelType);

export type ReadFuelTypeApiV1FuelTypesFuelTypeIdGetError = (HTTPValidationError);

export type UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutData = {
    body: FuelTypeUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        fuel_type_id: number;
    };
};

export type UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutResponse = (FuelType);

export type UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutError = (HTTPValidationError);

export type DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        fuel_type_id: number;
    };
};

export type DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteResponse = (FuelType);

export type DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteError = (HTTPValidationError);

export type ReadTransmissionsApiV1TransmissionsTransmissionsGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    query?: {
        page?: number;
    };
};

export type ReadTransmissionsApiV1TransmissionsTransmissionsGetResponse = (PaginationSchema_Transmission_);

export type ReadTransmissionsApiV1TransmissionsTransmissionsGetError = (HTTPValidationError);

export type ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        transmission_id: number;
    };
};

export type ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetResponse = (Transmission);

export type ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetError = (HTTPValidationError);

export type CreateTransmissionApiV1TransmissionsPostData = {
    body: TransmissionCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreateTransmissionApiV1TransmissionsPostResponse = (Transmission);

export type CreateTransmissionApiV1TransmissionsPostError = (HTTPValidationError);

export type UpdateTransmissionApiV1TransmissionsTransmissionIdPutData = {
    body: TransmissionUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        transmission_id: number;
    };
};

export type UpdateTransmissionApiV1TransmissionsTransmissionIdPutResponse = (Transmission);

export type UpdateTransmissionApiV1TransmissionsTransmissionIdPutError = (HTTPValidationError);

export type DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        transmission_id: number;
    };
};

export type DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteResponse = (Transmission);

export type DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteError = (HTTPValidationError);

export type ReadCitiesApiV1CitiesGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    query?: {
        page?: number;
    };
};

export type ReadCitiesApiV1CitiesGetResponse = (PaginationSchema_City_);

export type ReadCitiesApiV1CitiesGetError = (HTTPValidationError);

export type CreateCityApiV1CitiesPostData = {
    body: CityCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreateCityApiV1CitiesPostResponse = (City);

export type CreateCityApiV1CitiesPostError = (HTTPValidationError);

export type ReadCityApiV1CitiesCityIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        city_id: number;
    };
};

export type ReadCityApiV1CitiesCityIdGetResponse = (City);

export type ReadCityApiV1CitiesCityIdGetError = (HTTPValidationError);

export type UpdateCityApiV1CitiesCityIdPutData = {
    body: CityUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        city_id: number;
    };
};

export type UpdateCityApiV1CitiesCityIdPutResponse = (City);

export type UpdateCityApiV1CitiesCityIdPutError = (HTTPValidationError);

export type DeleteCityApiV1CitiesCityIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        city_id: number;
    };
};

export type DeleteCityApiV1CitiesCityIdDeleteResponse = (City);

export type DeleteCityApiV1CitiesCityIdDeleteError = (HTTPValidationError);

export type ReadCountriesApiV1CountriesGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    query?: {
        page?: number;
    };
};

export type ReadCountriesApiV1CountriesGetResponse = (PaginationSchema_Country_);

export type ReadCountriesApiV1CountriesGetError = (HTTPValidationError);

export type CreateCountryApiV1CountriesPostData = {
    body: CountryCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreateCountryApiV1CountriesPostResponse = (Country);

export type CreateCountryApiV1CountriesPostError = (HTTPValidationError);

export type ReadCountryApiV1CountriesCountryIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        country_id: number;
    };
};

export type ReadCountryApiV1CountriesCountryIdGetResponse = (Country);

export type ReadCountryApiV1CountriesCountryIdGetError = (HTTPValidationError);

export type UpdateCountryApiV1CountriesCountryIdPutData = {
    body: CountryUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        country_id: number;
    };
};

export type UpdateCountryApiV1CountriesCountryIdPutResponse = (Country);

export type UpdateCountryApiV1CountriesCountryIdPutError = (HTTPValidationError);

export type DeleteCountryApiV1CountriesCountryIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        country_id: number;
    };
};

export type DeleteCountryApiV1CountriesCountryIdDeleteResponse = (Country);

export type DeleteCountryApiV1CountriesCountryIdDeleteError = (HTTPValidationError);

export type ReadLocationsFromApiV1LocationFromGetData = {
    query?: {
        page?: number;
    };
};

export type ReadLocationsFromApiV1LocationFromGetResponse = (PaginationSchema_LocationFrom_);

export type ReadLocationsFromApiV1LocationFromGetError = (HTTPValidationError);

export type CreateLocationFromApiV1LocationFromPostData = {
    body: LocationFromCreate;
};

export type CreateLocationFromApiV1LocationFromPostResponse = (LocationFrom);

export type CreateLocationFromApiV1LocationFromPostError = (HTTPValidationError);

export type ReadLocationFromApiV1LocationFromLocationFromIdGetData = {
    path: {
        location_from_id: number;
    };
};

export type ReadLocationFromApiV1LocationFromLocationFromIdGetResponse = (LocationFrom);

export type ReadLocationFromApiV1LocationFromLocationFromIdGetError = (HTTPValidationError);

export type UpdateLocationFromApiV1LocationFromLocationFromIdPutData = {
    body: LocationFromUpdate;
    path: {
        location_from_id: number;
    };
};

export type UpdateLocationFromApiV1LocationFromLocationFromIdPutResponse = (LocationFrom);

export type UpdateLocationFromApiV1LocationFromLocationFromIdPutError = (HTTPValidationError);

export type DeleteLocationFromApiV1LocationFromLocationFromIdDeleteData = {
    path: {
        location_from_id: number;
    };
};

export type DeleteLocationFromApiV1LocationFromLocationFromIdDeleteResponse = (LocationFrom);

export type DeleteLocationFromApiV1LocationFromLocationFromIdDeleteError = (HTTPValidationError);

export type ReadPortsFromApiV1PortFromGetData = {
    query?: {
        page?: number;
    };
};

export type ReadPortsFromApiV1PortFromGetResponse = (PaginationSchema_PortFrom_);

export type ReadPortsFromApiV1PortFromGetError = (HTTPValidationError);

export type CreateNewPortFromApiV1PortFromPostData = {
    body: PortFromCreate;
};

export type CreateNewPortFromApiV1PortFromPostResponse = (PortFrom);

export type CreateNewPortFromApiV1PortFromPostError = (HTTPValidationError);

export type ReadPortFromApiV1PortFromPortFromIdGetData = {
    path: {
        port_from_id: number;
    };
};

export type ReadPortFromApiV1PortFromPortFromIdGetResponse = (PortFrom);

export type ReadPortFromApiV1PortFromPortFromIdGetError = (HTTPValidationError);

export type UpdateExistingPortFromApiV1PortFromPortFromIdPutData = {
    body: PortFromUpdate;
    path: {
        port_from_id: number;
    };
};

export type UpdateExistingPortFromApiV1PortFromPortFromIdPutResponse = (PortFrom);

export type UpdateExistingPortFromApiV1PortFromPortFromIdPutError = (HTTPValidationError);

export type DeleteExistingPortFromApiV1PortFromPortFromIdDeleteData = {
    path: {
        port_from_id: number;
    };
};

export type DeleteExistingPortFromApiV1PortFromPortFromIdDeleteResponse = (PortFrom);

export type DeleteExistingPortFromApiV1PortFromPortFromIdDeleteError = (HTTPValidationError);

export type ReadPortsToApiV1PortToGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    query?: {
        page?: number;
    };
};

export type ReadPortsToApiV1PortToGetResponse = (PaginationSchema_PortTo_);

export type ReadPortsToApiV1PortToGetError = (HTTPValidationError);

export type CreatePortToApiV1PortToPostData = {
    body: PortToCreate;
    headers?: {
        'Content-Language'?: string;
    };
};

export type CreatePortToApiV1PortToPostResponse = (PortTo);

export type CreatePortToApiV1PortToPostError = (HTTPValidationError);

export type ReadPortToApiV1PortToPortToIdGetData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        port_to_id: number;
    };
};

export type ReadPortToApiV1PortToPortToIdGetResponse = (PortTo);

export type ReadPortToApiV1PortToPortToIdGetError = (HTTPValidationError);

export type UpdatePortToApiV1PortToPortToIdPutData = {
    body: PortToUpdate;
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        port_to_id: number;
    };
};

export type UpdatePortToApiV1PortToPortToIdPutResponse = (PortTo);

export type UpdatePortToApiV1PortToPortToIdPutError = (HTTPValidationError);

export type DeletePortToApiV1PortToPortToIdDeleteData = {
    headers?: {
        'Content-Language'?: string;
    };
    path: {
        port_to_id: number;
    };
};

export type DeletePortToApiV1PortToPortToIdDeleteResponse = (PortTo);

export type DeletePortToApiV1PortToPortToIdDeleteError = (HTTPValidationError);

export type ReadOverlandTariffsApiV1OverlandTariffGetData = {
    query?: {
        location_id?: number;
        page?: number;
        port_id?: number;
    };
};

export type ReadOverlandTariffsApiV1OverlandTariffGetResponse = (PaginationSchema_OverlandTariff_);

export type ReadOverlandTariffsApiV1OverlandTariffGetError = (HTTPValidationError);

export type CreateNewOverlandTariffApiV1OverlandTariffPostData = {
    body: OverlandTariffCreate;
};

export type CreateNewOverlandTariffApiV1OverlandTariffPostResponse = (OverlandTariff);

export type CreateNewOverlandTariffApiV1OverlandTariffPostError = (HTTPValidationError);

export type ReadOverlandTariffApiV1OverlandTariffOverlandTariffIdGetData = {
    path: {
        overland_tariff_id: number;
    };
};

export type ReadOverlandTariffApiV1OverlandTariffOverlandTariffIdGetResponse = (OverlandTariff);

export type ReadOverlandTariffApiV1OverlandTariffOverlandTariffIdGetError = (HTTPValidationError);

export type UpdateExistingOverlandTariffApiV1OverlandTariffOverlandTariffIdPutData = {
    body: OverlandTariffUpdate;
    path: {
        overland_tariff_id: number;
    };
};

export type UpdateExistingOverlandTariffApiV1OverlandTariffOverlandTariffIdPutResponse = (OverlandTariff);

export type UpdateExistingOverlandTariffApiV1OverlandTariffOverlandTariffIdPutError = (HTTPValidationError);

export type DeleteExistingOverlandTariffApiV1OverlandTariffOverlandTariffIdDeleteData = {
    path: {
        overland_tariff_id: number;
    };
};

export type DeleteExistingOverlandTariffApiV1OverlandTariffOverlandTariffIdDeleteResponse = (OverlandTariff);

export type DeleteExistingOverlandTariffApiV1OverlandTariffOverlandTariffIdDeleteError = (HTTPValidationError);

export type ReadOverseaTariffsApiV1OverseaTariffGetData = {
    query?: {
        page?: number;
        port_from_id?: number;
        port_to_id?: number;
    };
};

export type ReadOverseaTariffsApiV1OverseaTariffGetResponse = (PaginationSchema_OverseaTariff_);

export type ReadOverseaTariffsApiV1OverseaTariffGetError = (HTTPValidationError);

export type CreateNewOverseaTariffApiV1OverseaTariffPostData = {
    body: OverseaTariffCreate;
};

export type CreateNewOverseaTariffApiV1OverseaTariffPostResponse = (OverseaTariff);

export type CreateNewOverseaTariffApiV1OverseaTariffPostError = (HTTPValidationError);

export type ReadOverseaTariffApiV1OverseaTariffOverseaTariffIdGetData = {
    path: {
        oversea_tariff_id: number;
    };
};

export type ReadOverseaTariffApiV1OverseaTariffOverseaTariffIdGetResponse = (OverseaTariff);

export type ReadOverseaTariffApiV1OverseaTariffOverseaTariffIdGetError = (HTTPValidationError);

export type UpdateExistingOverseaTariffApiV1OverseaTariffOverseaTariffIdPutData = {
    body: OverseaTariffUpdate;
    path: {
        oversea_tariff_id: number;
    };
};

export type UpdateExistingOverseaTariffApiV1OverseaTariffOverseaTariffIdPutResponse = (OverseaTariff);

export type UpdateExistingOverseaTariffApiV1OverseaTariffOverseaTariffIdPutError = (HTTPValidationError);

export type DeleteExistingOverseaTariffApiV1OverseaTariffOverseaTariffIdDeleteData = {
    path: {
        oversea_tariff_id: number;
    };
};

export type DeleteExistingOverseaTariffApiV1OverseaTariffOverseaTariffIdDeleteResponse = (OverseaTariff);

export type DeleteExistingOverseaTariffApiV1OverseaTariffOverseaTariffIdDeleteError = (HTTPValidationError);

export type GetDeliveryTariffsApiV1CalculateTariffDeliveryGetData = {
    query: {
        location_id: number;
        port_from_id: number;
        port_to_id: number;
    };
};

export type GetDeliveryTariffsApiV1CalculateTariffDeliveryGetResponse = (Tariff);

export type GetDeliveryTariffsApiV1CalculateTariffDeliveryGetError = (HTTPValidationError);

export type GetTotalTariffsApiV1CalculateTariffTotalGetData = {
    query: {
        auction_id: number;
        cargo_type: CARGO_TYPE;
        country_id: number;
        engine_volume_id: number;
        fuel_type_id: number;
        location_id: number;
        port_from_id: number;
        port_to_id: number;
        price: number;
        year: number;
    };
};

export type GetTotalTariffsApiV1CalculateTariffTotalGetResponse = (TariffTotal);

export type GetTotalTariffsApiV1CalculateTariffTotalGetError = (HTTPValidationError);

export type ReadContainersApiV1ContainerGetData = {
    query?: {
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
    };
};

export type ReadContainersApiV1ContainerGetResponse = (PaginationSchema_Container_);

export type ReadContainersApiV1ContainerGetError = (HTTPValidationError);

export type CreateNewContainerApiV1ContainerPostData = {
    body: ContainerCreate;
};

export type CreateNewContainerApiV1ContainerPostResponse = (Container);

export type CreateNewContainerApiV1ContainerPostError = (HTTPValidationError);

export type ReadContainerApiV1ContainerContainerIdGetData = {
    path: {
        container_id: number;
    };
};

export type ReadContainerApiV1ContainerContainerIdGetResponse = (ContainerFull);

export type ReadContainerApiV1ContainerContainerIdGetError = (HTTPValidationError);

export type UpdateExistingContainerApiV1ContainerContainerIdPutData = {
    body: ContainerUpdate;
    path: {
        container_id: number;
    };
};

export type UpdateExistingContainerApiV1ContainerContainerIdPutResponse = (Container);

export type UpdateExistingContainerApiV1ContainerContainerIdPutError = (HTTPValidationError);

export type DeleteExistingContainerApiV1ContainerContainerIdDeleteData = {
    path: {
        container_id: number;
    };
};

export type DeleteExistingContainerApiV1ContainerContainerIdDeleteResponse = (Container);

export type DeleteExistingContainerApiV1ContainerContainerIdDeleteError = (HTTPValidationError);

export type ReadCargoByVinApiV1CargoGeneralVinCargoVinGetData = {
    path: {
        cargo_vin: string;
    };
};

export type ReadCargoByVinApiV1CargoGeneralVinCargoVinGetResponse = (Cargo);

export type ReadCargoByVinApiV1CargoGeneralVinCargoVinGetError = (HTTPValidationError);

export type ReadCargosAdminApiV1CargoAdminGetData = {
    query?: {
        car_brand_id?: number;
        dealer_id?: string;
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
    };
};

export type ReadCargosAdminApiV1CargoAdminGetResponse = (PaginationSchema_CargoAdmin_);

export type ReadCargosAdminApiV1CargoAdminGetError = (HTTPValidationError);

export type CreateNewCargoAdminApiV1CargoAdminPostData = {
    body: CargoAdminCreate;
};

export type CreateNewCargoAdminApiV1CargoAdminPostResponse = (CargoAdmin);

export type CreateNewCargoAdminApiV1CargoAdminPostError = (HTTPValidationError);

export type ReadCargoAdminApiV1CargoAdminCargoIdGetData = {
    path: {
        cargo_id: number;
    };
};

export type ReadCargoAdminApiV1CargoAdminCargoIdGetResponse = (CargoAdmin);

export type ReadCargoAdminApiV1CargoAdminCargoIdGetError = (HTTPValidationError);

export type UpdateExistingCargoAdminApiV1CargoAdminCargoIdPutData = {
    body: CargoAdminUpdate;
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoAdminApiV1CargoAdminCargoIdPutResponse = (CargoAdmin);

export type UpdateExistingCargoAdminApiV1CargoAdminCargoIdPutError = (HTTPValidationError);

export type DeleteExistingCargoAdminApiV1CargoAdminCargoIdDeleteData = {
    path: {
        cargo_id: number;
    };
};

export type DeleteExistingCargoAdminApiV1CargoAdminCargoIdDeleteResponse = (CargoAdmin);

export type DeleteExistingCargoAdminApiV1CargoAdminCargoIdDeleteError = (HTTPValidationError);

export type ReadCargosManagerApiV1CargoManagerGetData = {
    query?: {
        car_brand_id?: number;
        dealer_id?: string;
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
        status?: CARGO_STATUS;
    };
};

export type ReadCargosManagerApiV1CargoManagerGetResponse = (PaginationSchema_CargoManager_);

export type ReadCargosManagerApiV1CargoManagerGetError = (HTTPValidationError);

export type CreateNewCargoManagerApiV1CargoManagerPostData = {
    body: CargoManagerCreate;
};

export type CreateNewCargoManagerApiV1CargoManagerPostResponse = (CargoManager);

export type CreateNewCargoManagerApiV1CargoManagerPostError = (HTTPValidationError);

export type ReadCargoManagerApiV1CargoManagerCargoIdGetData = {
    path: {
        cargo_id: number;
    };
};

export type ReadCargoManagerApiV1CargoManagerCargoIdGetResponse = (CargoManager);

export type ReadCargoManagerApiV1CargoManagerCargoIdGetError = (HTTPValidationError);

export type UpdateExistingCargoManagerApiV1CargoManagerCargoIdPutData = {
    body: CargoManagerUpdate;
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoManagerApiV1CargoManagerCargoIdPutResponse = (CargoManager);

export type UpdateExistingCargoManagerApiV1CargoManagerCargoIdPutError = (HTTPValidationError);

export type DeleteExistingCargoManagerApiV1CargoManagerCargoIdDeleteData = {
    path: {
        cargo_id: number;
    };
};

export type DeleteExistingCargoManagerApiV1CargoManagerCargoIdDeleteResponse = (CargoManager);

export type DeleteExistingCargoManagerApiV1CargoManagerCargoIdDeleteError = (HTTPValidationError);

export type ReadCargoByVinManagerApiV1CargoManagerVinCargoVinGetData = {
    path: {
        cargo_vin: string;
    };
};

export type ReadCargoByVinManagerApiV1CargoManagerVinCargoVinGetResponse = (CargoManager);

export type ReadCargoByVinManagerApiV1CargoManagerVinCargoVinGetError = (HTTPValidationError);

export type ReadCargosLogistApiV1CargoLogisticianGetData = {
    query?: {
        car_brand_id?: number;
        dealer_id?: string;
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
        status?: CARGO_STATUS;
    };
};

export type ReadCargosLogistApiV1CargoLogisticianGetResponse = (PaginationSchema_CargoLogistician_);

export type ReadCargosLogistApiV1CargoLogisticianGetError = (HTTPValidationError);

export type ReadCargoByVinLogistApiV1CargoLogisticianVinCargoVinGetData = {
    path: {
        cargo_vin: string;
    };
};

export type ReadCargoByVinLogistApiV1CargoLogisticianVinCargoVinGetResponse = (CargoLogistician);

export type ReadCargoByVinLogistApiV1CargoLogisticianVinCargoVinGetError = (HTTPValidationError);

export type UpdateExistingCargoLogistApiV1CargoLogisticianCargoIdPutData = {
    body: CargoLogisticianUpdate;
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoLogistApiV1CargoLogisticianCargoIdPutResponse = (CargoLogistician);

export type UpdateExistingCargoLogistApiV1CargoLogisticianCargoIdPutError = (HTTPValidationError);

export type ReadCargosAccountantApiV1CargoAccountantGetData = {
    query?: {
        car_brand_id?: number;
        dealer_id?: string;
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
        status?: CARGO_STATUS;
    };
};

export type ReadCargosAccountantApiV1CargoAccountantGetResponse = (PaginationSchema_CargoAccountant_);

export type ReadCargosAccountantApiV1CargoAccountantGetError = (HTTPValidationError);

export type ReadCargoAccountantApiV1CargoAccountantCargoIdGetData = {
    path: {
        cargo_id: number;
    };
};

export type ReadCargoAccountantApiV1CargoAccountantCargoIdGetResponse = (CargoAccountant);

export type ReadCargoAccountantApiV1CargoAccountantCargoIdGetError = (HTTPValidationError);

export type UpdateExistingCargoAccountantApiV1CargoAccountantCargoIdPutData = {
    body: CargoAccountantUpdate;
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoAccountantApiV1CargoAccountantCargoIdPutResponse = (CargoAccountant);

export type UpdateExistingCargoAccountantApiV1CargoAccountantCargoIdPutError = (HTTPValidationError);

export type ReadCargoByVinAccountantApiV1CargoAccountantVinCargoVinGetData = {
    path: {
        cargo_vin: string;
    };
};

export type ReadCargoByVinAccountantApiV1CargoAccountantVinCargoVinGetResponse = (CargoAccountant);

export type ReadCargoByVinAccountantApiV1CargoAccountantVinCargoVinGetError = (HTTPValidationError);

export type ReadCargosBrokerApiV1CargoBrokerGetData = {
    query?: {
        car_brand_id?: number;
        dealer_id?: string;
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
        status?: CARGO_STATUS;
    };
};

export type ReadCargosBrokerApiV1CargoBrokerGetResponse = (PaginationSchema_CargoBroker_);

export type ReadCargosBrokerApiV1CargoBrokerGetError = (HTTPValidationError);

export type ReadCargoBrokerApiV1CargoBrokerCargoIdGetData = {
    path: {
        cargo_id: number;
    };
};

export type ReadCargoBrokerApiV1CargoBrokerCargoIdGetResponse = (CargoBroker);

export type ReadCargoBrokerApiV1CargoBrokerCargoIdGetError = (HTTPValidationError);

export type UpdateExistingCargoBrokerApiV1CargoBrokerCargoIdPutData = {
    body: CargoBrokerUpdate;
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoBrokerApiV1CargoBrokerCargoIdPutResponse = (CargoBroker);

export type UpdateExistingCargoBrokerApiV1CargoBrokerCargoIdPutError = (HTTPValidationError);

export type ReadCargoByVinBrokerApiV1CargoBrokerVinCargoVinGetData = {
    path: {
        cargo_vin: string;
    };
};

export type ReadCargoByVinBrokerApiV1CargoBrokerVinCargoVinGetResponse = (CargoBroker);

export type ReadCargoByVinBrokerApiV1CargoBrokerVinCargoVinGetError = (HTTPValidationError);

export type ReadCargosDealerApiV1CargoDealerGetData = {
    query?: {
        car_brand_id?: number;
        dealer_id?: string;
        is_archived?: boolean;
        page?: number;
        search?: string;
        sort?: string;
        sort_by?: string;
        status?: CARGO_STATUS;
    };
};

export type ReadCargosDealerApiV1CargoDealerGetResponse = (PaginationSchema_CargoDealer_);

export type ReadCargosDealerApiV1CargoDealerGetError = (HTTPValidationError);

export type ReadCargoDealerApiV1CargoDealerCargoIdGetData = {
    path: {
        cargo_id: number;
    };
};

export type ReadCargoDealerApiV1CargoDealerCargoIdGetResponse = (CargoDealer);

export type ReadCargoDealerApiV1CargoDealerCargoIdGetError = (HTTPValidationError);

export type UpdateExistingCargoDealerApiV1CargoDealerCargoIdPutData = {
    body: CargoDealerUpdate;
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoDealerApiV1CargoDealerCargoIdPutResponse = (CargoDealer);

export type UpdateExistingCargoDealerApiV1CargoDealerCargoIdPutError = (HTTPValidationError);

export type ReadCargoByVinDealerApiV1CargoDealerVinCargoVinGetData = {
    path: {
        cargo_vin: string;
    };
};

export type ReadCargoByVinDealerApiV1CargoDealerVinCargoVinGetResponse = (CargoDealer);

export type ReadCargoByVinDealerApiV1CargoDealerVinCargoVinGetError = (HTTPValidationError);

export type UpdateExistingCargoLogistApiV1CargoRobotSetIsPhotoPostData = {
    body: CargoSetIsPhotos;
};

export type UpdateExistingCargoLogistApiV1CargoRobotSetIsPhotoPostResponse = (unknown);

export type UpdateExistingCargoLogistApiV1CargoRobotSetIsPhotoPostError = (HTTPValidationError);

export type UpdateExistingCargoRobotApiV1CargoRobotChangeCargoPutData = {
    body: CargoSetIsPhotos;
};

export type UpdateExistingCargoRobotApiV1CargoRobotChangeCargoPutResponse = (unknown);

export type UpdateExistingCargoRobotApiV1CargoRobotChangeCargoPutError = (HTTPValidationError);

export type UpdateExistingCargoRobotApiV1CargoRobotHasFileAccessPostData = {
    body: CargoDocsAccess;
};

export type UpdateExistingCargoRobotApiV1CargoRobotHasFileAccessPostResponse = (unknown);

export type UpdateExistingCargoRobotApiV1CargoRobotHasFileAccessPostError = (HTTPValidationError);

export type UpdateExistingCargoRobotApiV1CargoRobotCargoCargoIdGetData = {
    path: {
        cargo_id: number;
    };
};

export type UpdateExistingCargoRobotApiV1CargoRobotCargoCargoIdGetResponse = (CargoForInvoiceSchema);

export type UpdateExistingCargoRobotApiV1CargoRobotCargoCargoIdGetError = (HTTPValidationError);

export type SendNotificaitonApiV1CargoRobotNotificationGetResponse = (unknown);

export type SendNotificaitonApiV1CargoRobotNotificationGetError = unknown;

export type RootGetResponse = (unknown);

export type RootGetError = unknown;