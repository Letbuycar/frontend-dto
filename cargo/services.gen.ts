// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { ReadAuctionsApiV1AuctionsGetData, ReadAuctionsApiV1AuctionsGetError, ReadAuctionsApiV1AuctionsGetResponse, CreateNewAuctionApiV1AuctionsPostData, CreateNewAuctionApiV1AuctionsPostError, CreateNewAuctionApiV1AuctionsPostResponse, ReadAuctionApiV1AuctionsAuctionIdGetData, ReadAuctionApiV1AuctionsAuctionIdGetError, ReadAuctionApiV1AuctionsAuctionIdGetResponse, UpdateExistingAuctionApiV1AuctionsAuctionIdPutData, UpdateExistingAuctionApiV1AuctionsAuctionIdPutError, UpdateExistingAuctionApiV1AuctionsAuctionIdPutResponse, DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteData, DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteError, DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteResponse, ReadBoatTypesApiV1BoatTypesGetData, ReadBoatTypesApiV1BoatTypesGetError, ReadBoatTypesApiV1BoatTypesGetResponse, CreateBoatTypeApiV1BoatTypesPostData, CreateBoatTypeApiV1BoatTypesPostError, CreateBoatTypeApiV1BoatTypesPostResponse, ReadBoatTypeApiV1BoatTypesBodyTypeIdGetData, ReadBoatTypeApiV1BoatTypesBodyTypeIdGetError, ReadBoatTypeApiV1BoatTypesBodyTypeIdGetResponse, UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutData, UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutError, UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutResponse, DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteData, DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteError, DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteResponse, ReadBodyTypesApiV1BodyTypesGetData, ReadBodyTypesApiV1BodyTypesGetError, ReadBodyTypesApiV1BodyTypesGetResponse, CreateBodyTypeApiV1BodyTypesPostData, CreateBodyTypeApiV1BodyTypesPostError, CreateBodyTypeApiV1BodyTypesPostResponse, ReadBodyTypeApiV1BodyTypesBodyTypeIdGetData, ReadBodyTypeApiV1BodyTypesBodyTypeIdGetError, ReadBodyTypeApiV1BodyTypesBodyTypeIdGetResponse, UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutData, UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutError, UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutResponse, DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteData, DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteError, DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteResponse, ReadCarBrandsApiV1CarBrandsGetData, ReadCarBrandsApiV1CarBrandsGetError, ReadCarBrandsApiV1CarBrandsGetResponse, CreateNewCarBrandApiV1CarBrandsPostData, CreateNewCarBrandApiV1CarBrandsPostError, CreateNewCarBrandApiV1CarBrandsPostResponse, ReadCarBrandApiV1CarBrandsCarBrandIdGetData, ReadCarBrandApiV1CarBrandsCarBrandIdGetError, ReadCarBrandApiV1CarBrandsCarBrandIdGetResponse, UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutData, UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutError, UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutResponse, DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteData, DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteError, DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteResponse, ReadCarModelsApiV1CarModelsGetData, ReadCarModelsApiV1CarModelsGetError, ReadCarModelsApiV1CarModelsGetResponse, CreateNewCarModelApiV1CarModelsPostData, CreateNewCarModelApiV1CarModelsPostError, CreateNewCarModelApiV1CarModelsPostResponse, ReadCarModelApiV1CarModelsCarModelIdGetData, ReadCarModelApiV1CarModelsCarModelIdGetError, ReadCarModelApiV1CarModelsCarModelIdGetResponse, UpdateExistingCarModelApiV1CarModelsCarModelIdPutData, UpdateExistingCarModelApiV1CarModelsCarModelIdPutError, UpdateExistingCarModelApiV1CarModelsCarModelIdPutResponse, DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteData, DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteError, DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteResponse, ReadEngineVolumesApiV1EngineVolumesGetData, ReadEngineVolumesApiV1EngineVolumesGetError, ReadEngineVolumesApiV1EngineVolumesGetResponse, CreateNewEngineVolumeApiV1EngineVolumesPostData, CreateNewEngineVolumeApiV1EngineVolumesPostError, CreateNewEngineVolumeApiV1EngineVolumesPostResponse, ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetData, ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetError, ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetResponse, UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutData, UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutError, UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutResponse, DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteData, DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteError, DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteResponse, ReadFuelTypesApiV1FuelTypesGetData, ReadFuelTypesApiV1FuelTypesGetError, ReadFuelTypesApiV1FuelTypesGetResponse, CreateFuelTypeApiV1FuelTypesPostData, CreateFuelTypeApiV1FuelTypesPostError, CreateFuelTypeApiV1FuelTypesPostResponse, ReadFuelTypeApiV1FuelTypesFuelTypeIdGetData, ReadFuelTypeApiV1FuelTypesFuelTypeIdGetError, ReadFuelTypeApiV1FuelTypesFuelTypeIdGetResponse, UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutData, UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutError, UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutResponse, DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteData, DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteError, DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteResponse, ReadTransmissionsApiV1TransmissionsTransmissionsGetData, ReadTransmissionsApiV1TransmissionsTransmissionsGetError, ReadTransmissionsApiV1TransmissionsTransmissionsGetResponse, ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetData, ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetError, ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetResponse, CreateTransmissionApiV1TransmissionsPostData, CreateTransmissionApiV1TransmissionsPostError, CreateTransmissionApiV1TransmissionsPostResponse, UpdateTransmissionApiV1TransmissionsTransmissionIdPutData, UpdateTransmissionApiV1TransmissionsTransmissionIdPutError, UpdateTransmissionApiV1TransmissionsTransmissionIdPutResponse, DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteData, DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteError, DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteResponse, ReadCitiesApiV1CitiesGetData, ReadCitiesApiV1CitiesGetError, ReadCitiesApiV1CitiesGetResponse, CreateСityApiV1CitiesPostData, CreateСityApiV1CitiesPostError, CreateСityApiV1CitiesPostResponse, ReadСityApiV1CitiesСityIdGetData, ReadСityApiV1CitiesСityIdGetError, ReadСityApiV1CitiesСityIdGetResponse, UpdateСityApiV1CitiesСityIdPutData, UpdateСityApiV1CitiesСityIdPutError, UpdateСityApiV1CitiesСityIdPutResponse, DeleteСityApiV1CitiesСityIdDeleteData, DeleteСityApiV1CitiesСityIdDeleteError, DeleteСityApiV1CitiesСityIdDeleteResponse, ReadCountriesApiV1CountriesGetData, ReadCountriesApiV1CountriesGetError, ReadCountriesApiV1CountriesGetResponse, CreateCountryApiV1CountriesPostData, CreateCountryApiV1CountriesPostError, CreateCountryApiV1CountriesPostResponse, ReadCountryApiV1CountriesCountryIdGetData, ReadCountryApiV1CountriesCountryIdGetError, ReadCountryApiV1CountriesCountryIdGetResponse, UpdateCountryApiV1CountriesCountryIdPutData, UpdateCountryApiV1CountriesCountryIdPutError, UpdateCountryApiV1CountriesCountryIdPutResponse, DeleteCountryApiV1CountriesCountryIdDeleteData, DeleteCountryApiV1CountriesCountryIdDeleteError, DeleteCountryApiV1CountriesCountryIdDeleteResponse, ReadPortsFromApiV1PortFromGetData, ReadPortsFromApiV1PortFromGetError, ReadPortsFromApiV1PortFromGetResponse, CreateNewPortFromApiV1PortFromPostData, CreateNewPortFromApiV1PortFromPostError, CreateNewPortFromApiV1PortFromPostResponse, ReadPortFromApiV1PortFromPortFromIdGetData, ReadPortFromApiV1PortFromPortFromIdGetError, ReadPortFromApiV1PortFromPortFromIdGetResponse, UpdateExistingPortFromApiV1PortFromPortFromIdPutData, UpdateExistingPortFromApiV1PortFromPortFromIdPutError, UpdateExistingPortFromApiV1PortFromPortFromIdPutResponse, DeleteExistingPortFromApiV1PortFromPortFromIdDeleteData, DeleteExistingPortFromApiV1PortFromPortFromIdDeleteError, DeleteExistingPortFromApiV1PortFromPortFromIdDeleteResponse, ReadPortsToApiV1PortToGetData, ReadPortsToApiV1PortToGetError, ReadPortsToApiV1PortToGetResponse, CreatePortToApiV1PortToPostData, CreatePortToApiV1PortToPostError, CreatePortToApiV1PortToPostResponse, ReadPortToApiV1PortToPortToIdGetData, ReadPortToApiV1PortToPortToIdGetError, ReadPortToApiV1PortToPortToIdGetResponse, UpdatePortToApiV1PortToPortToIdPutData, UpdatePortToApiV1PortToPortToIdPutError, UpdatePortToApiV1PortToPortToIdPutResponse, DeletePortToApiV1PortToPortToIdDeleteData, DeletePortToApiV1PortToPortToIdDeleteError, DeletePortToApiV1PortToPortToIdDeleteResponse, RootGetError, RootGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Read Auctions
 */
export const readAuctionsApiV1AuctionsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadAuctionsApiV1AuctionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadAuctionsApiV1AuctionsGetResponse, ReadAuctionsApiV1AuctionsGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/auctions/'
    });
};

/**
 * Create New Auction
 */
export const createNewAuctionApiV1AuctionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewAuctionApiV1AuctionsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateNewAuctionApiV1AuctionsPostResponse, CreateNewAuctionApiV1AuctionsPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/auctions/'
    });
};

/**
 * Read Auction
 */
export const readAuctionApiV1AuctionsAuctionIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadAuctionApiV1AuctionsAuctionIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadAuctionApiV1AuctionsAuctionIdGetResponse, ReadAuctionApiV1AuctionsAuctionIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/auctions/{auction_id}/'
    });
};

/**
 * Update Existing Auction
 */
export const updateExistingAuctionApiV1AuctionsAuctionIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingAuctionApiV1AuctionsAuctionIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateExistingAuctionApiV1AuctionsAuctionIdPutResponse, UpdateExistingAuctionApiV1AuctionsAuctionIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/auctions/{auction_id}/'
    });
};

/**
 * Delete Existing Auction
 */
export const deleteExistingAuctionApiV1AuctionsAuctionIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteResponse, DeleteExistingAuctionApiV1AuctionsAuctionIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/auctions/{auction_id}/'
    });
};

/**
 * Read Boat Types
 */
export const readBoatTypesApiV1BoatTypesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadBoatTypesApiV1BoatTypesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadBoatTypesApiV1BoatTypesGetResponse, ReadBoatTypesApiV1BoatTypesGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/boat-types/'
    });
};

/**
 * Create Boat Type
 */
export const createBoatTypeApiV1BoatTypesPost = <ThrowOnError extends boolean = false>(options: Options<CreateBoatTypeApiV1BoatTypesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateBoatTypeApiV1BoatTypesPostResponse, CreateBoatTypeApiV1BoatTypesPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/boat-types/'
    });
};

/**
 * Read Boat Type
 */
export const readBoatTypeApiV1BoatTypesBodyTypeIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadBoatTypeApiV1BoatTypesBodyTypeIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadBoatTypeApiV1BoatTypesBodyTypeIdGetResponse, ReadBoatTypeApiV1BoatTypesBodyTypeIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/boat-types/{body_type_id}'
    });
};

/**
 * Update Boat Type
 */
export const updateBoatTypeApiV1BoatTypesBodyTypeIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutResponse, UpdateBoatTypeApiV1BoatTypesBodyTypeIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/boat-types/{body_type_id}/'
    });
};

/**
 * Delete Boat Type
 */
export const deleteBoatTypeApiV1BoatTypesBodyTypeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteResponse, DeleteBoatTypeApiV1BoatTypesBodyTypeIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/boat-types/{body_type_id}/'
    });
};

/**
 * Read Body Types
 */
export const readBodyTypesApiV1BodyTypesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadBodyTypesApiV1BodyTypesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadBodyTypesApiV1BodyTypesGetResponse, ReadBodyTypesApiV1BodyTypesGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/body-types/'
    });
};

/**
 * Create Body Type
 */
export const createBodyTypeApiV1BodyTypesPost = <ThrowOnError extends boolean = false>(options: Options<CreateBodyTypeApiV1BodyTypesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateBodyTypeApiV1BodyTypesPostResponse, CreateBodyTypeApiV1BodyTypesPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/body-types/'
    });
};

/**
 * Read Body Type
 */
export const readBodyTypeApiV1BodyTypesBodyTypeIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadBodyTypeApiV1BodyTypesBodyTypeIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadBodyTypeApiV1BodyTypesBodyTypeIdGetResponse, ReadBodyTypeApiV1BodyTypesBodyTypeIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/body-types/{body_type_id}'
    });
};

/**
 * Update Body Type
 */
export const updateBodyTypeApiV1BodyTypesBodyTypeIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutResponse, UpdateBodyTypeApiV1BodyTypesBodyTypeIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/body-types/{body_type_id}/'
    });
};

/**
 * Delete Body Type
 */
export const deleteBodyTypeApiV1BodyTypesBodyTypeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteResponse, DeleteBodyTypeApiV1BodyTypesBodyTypeIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/body-types/{body_type_id}/'
    });
};

/**
 * Read Car Brands
 */
export const readCarBrandsApiV1CarBrandsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCarBrandsApiV1CarBrandsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCarBrandsApiV1CarBrandsGetResponse, ReadCarBrandsApiV1CarBrandsGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-brands/'
    });
};

/**
 * Create New Car Brand
 */
export const createNewCarBrandApiV1CarBrandsPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewCarBrandApiV1CarBrandsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateNewCarBrandApiV1CarBrandsPostResponse, CreateNewCarBrandApiV1CarBrandsPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-brands/'
    });
};

/**
 * Read Car Brand
 */
export const readCarBrandApiV1CarBrandsCarBrandIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCarBrandApiV1CarBrandsCarBrandIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCarBrandApiV1CarBrandsCarBrandIdGetResponse, ReadCarBrandApiV1CarBrandsCarBrandIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-brands/{car_brand_id}/'
    });
};

/**
 * Update Existing Car Brand
 */
export const updateExistingCarBrandApiV1CarBrandsCarBrandIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutResponse, UpdateExistingCarBrandApiV1CarBrandsCarBrandIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-brands/{car_brand_id}/'
    });
};

/**
 * Delete Existing Car Brand
 */
export const deleteExistingCarBrandApiV1CarBrandsCarBrandIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteResponse, DeleteExistingCarBrandApiV1CarBrandsCarBrandIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-brands/{car_brand_id}/'
    });
};

/**
 * Read Car Models
 */
export const readCarModelsApiV1CarModelsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCarModelsApiV1CarModelsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCarModelsApiV1CarModelsGetResponse, ReadCarModelsApiV1CarModelsGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-models/'
    });
};

/**
 * Create New Car Model
 */
export const createNewCarModelApiV1CarModelsPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewCarModelApiV1CarModelsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateNewCarModelApiV1CarModelsPostResponse, CreateNewCarModelApiV1CarModelsPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-models/'
    });
};

/**
 * Read Car Model
 */
export const readCarModelApiV1CarModelsCarModelIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCarModelApiV1CarModelsCarModelIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCarModelApiV1CarModelsCarModelIdGetResponse, ReadCarModelApiV1CarModelsCarModelIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-models/{car_model_id}/'
    });
};

/**
 * Update Existing Car Model
 */
export const updateExistingCarModelApiV1CarModelsCarModelIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingCarModelApiV1CarModelsCarModelIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateExistingCarModelApiV1CarModelsCarModelIdPutResponse, UpdateExistingCarModelApiV1CarModelsCarModelIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-models/{car_model_id}/'
    });
};

/**
 * Delete Existing Car Model
 */
export const deleteExistingCarModelApiV1CarModelsCarModelIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteResponse, DeleteExistingCarModelApiV1CarModelsCarModelIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/car-models/{car_model_id}/'
    });
};

/**
 * Read Engine Volumes
 */
export const readEngineVolumesApiV1EngineVolumesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadEngineVolumesApiV1EngineVolumesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadEngineVolumesApiV1EngineVolumesGetResponse, ReadEngineVolumesApiV1EngineVolumesGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/engine-volumes/'
    });
};

/**
 * Create New Engine Volume
 */
export const createNewEngineVolumeApiV1EngineVolumesPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewEngineVolumeApiV1EngineVolumesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateNewEngineVolumeApiV1EngineVolumesPostResponse, CreateNewEngineVolumeApiV1EngineVolumesPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/engine-volumes/'
    });
};

/**
 * Read Engine Volume
 */
export const readEngineVolumeApiV1EngineVolumesEngineVolumeIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetResponse, ReadEngineVolumeApiV1EngineVolumesEngineVolumeIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/engine-volumes/{engine_volume_id}/'
    });
};

/**
 * Update Existing Engine Volume
 */
export const updateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutResponse, UpdateExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/engine-volumes/{engine_volume_id}/'
    });
};

/**
 * Delete Existing Engine Volume
 */
export const deleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteResponse, DeleteExistingEngineVolumeApiV1EngineVolumesEngineVolumeIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/engine-volumes/{engine_volume_id}/'
    });
};

/**
 * Read Fuel Types
 */
export const readFuelTypesApiV1FuelTypesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadFuelTypesApiV1FuelTypesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadFuelTypesApiV1FuelTypesGetResponse, ReadFuelTypesApiV1FuelTypesGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/fuel-types/'
    });
};

/**
 * Create Fuel Type
 */
export const createFuelTypeApiV1FuelTypesPost = <ThrowOnError extends boolean = false>(options: Options<CreateFuelTypeApiV1FuelTypesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateFuelTypeApiV1FuelTypesPostResponse, CreateFuelTypeApiV1FuelTypesPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/fuel-types/'
    });
};

/**
 * Read Fuel Type
 */
export const readFuelTypeApiV1FuelTypesFuelTypeIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadFuelTypeApiV1FuelTypesFuelTypeIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadFuelTypeApiV1FuelTypesFuelTypeIdGetResponse, ReadFuelTypeApiV1FuelTypesFuelTypeIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/fuel-types/{fuel_type_id}'
    });
};

/**
 * Update Fuel Type
 */
export const updateFuelTypeApiV1FuelTypesFuelTypeIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutResponse, UpdateFuelTypeApiV1FuelTypesFuelTypeIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/fuel-types/{fuel_type_id}/'
    });
};

/**
 * Delete Fuel Type
 */
export const deleteFuelTypeApiV1FuelTypesFuelTypeIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteResponse, DeleteFuelTypeApiV1FuelTypesFuelTypeIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/fuel-types/{fuel_type_id}/'
    });
};

/**
 * Read Transmissions
 */
export const readTransmissionsApiV1TransmissionsTransmissionsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadTransmissionsApiV1TransmissionsTransmissionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTransmissionsApiV1TransmissionsTransmissionsGetResponse, ReadTransmissionsApiV1TransmissionsTransmissionsGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/transmissions/transmissions/'
    });
};

/**
 * Read Transmission
 */
export const readTransmissionApiV1TransmissionsTransmissionsTransmissionIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetResponse, ReadTransmissionApiV1TransmissionsTransmissionsTransmissionIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/transmissions/transmissions/{transmission_id}'
    });
};

/**
 * Create Transmission
 */
export const createTransmissionApiV1TransmissionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTransmissionApiV1TransmissionsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTransmissionApiV1TransmissionsPostResponse, CreateTransmissionApiV1TransmissionsPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/transmissions/'
    });
};

/**
 * Update Transmission
 */
export const updateTransmissionApiV1TransmissionsTransmissionIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTransmissionApiV1TransmissionsTransmissionIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateTransmissionApiV1TransmissionsTransmissionIdPutResponse, UpdateTransmissionApiV1TransmissionsTransmissionIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/transmissions/{transmission_id}/'
    });
};

/**
 * Delete Transmission
 */
export const deleteTransmissionApiV1TransmissionsTransmissionIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteResponse, DeleteTransmissionApiV1TransmissionsTransmissionIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/transmissions/{transmission_id}/'
    });
};

/**
 * Read Cities
 */
export const readCitiesApiV1CitiesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCitiesApiV1CitiesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCitiesApiV1CitiesGetResponse, ReadCitiesApiV1CitiesGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/cities/'
    });
};

/**
 * Create Сity
 */
export const createСityApiV1CitiesPost = <ThrowOnError extends boolean = false>(options: Options<CreateСityApiV1CitiesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateСityApiV1CitiesPostResponse, CreateСityApiV1CitiesPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/cities/'
    });
};

/**
 * Read Сity
 */
export const readСityApiV1CitiesСityIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadСityApiV1CitiesСityIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadСityApiV1CitiesСityIdGetResponse, ReadСityApiV1CitiesСityIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/cities/{сity_id}'
    });
};

/**
 * Update Сity
 */
export const updateСityApiV1CitiesСityIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateСityApiV1CitiesСityIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateСityApiV1CitiesСityIdPutResponse, UpdateСityApiV1CitiesСityIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/cities/{сity_id}/'
    });
};

/**
 * Delete Сity
 */
export const deleteСityApiV1CitiesСityIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteСityApiV1CitiesСityIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteСityApiV1CitiesСityIdDeleteResponse, DeleteСityApiV1CitiesСityIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/cities/{сity_id}/'
    });
};

/**
 * Read Countries
 */
export const readCountriesApiV1CountriesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadCountriesApiV1CountriesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCountriesApiV1CountriesGetResponse, ReadCountriesApiV1CountriesGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/countries/'
    });
};

/**
 * Create Country
 */
export const createCountryApiV1CountriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateCountryApiV1CountriesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCountryApiV1CountriesPostResponse, CreateCountryApiV1CountriesPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/countries/'
    });
};

/**
 * Read Country
 */
export const readCountryApiV1CountriesCountryIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCountryApiV1CountriesCountryIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCountryApiV1CountriesCountryIdGetResponse, ReadCountryApiV1CountriesCountryIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/countries/{country_id}'
    });
};

/**
 * Update Country
 */
export const updateCountryApiV1CountriesCountryIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCountryApiV1CountriesCountryIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateCountryApiV1CountriesCountryIdPutResponse, UpdateCountryApiV1CountriesCountryIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/countries/{country_id}/'
    });
};

/**
 * Delete Country
 */
export const deleteCountryApiV1CountriesCountryIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCountryApiV1CountriesCountryIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCountryApiV1CountriesCountryIdDeleteResponse, DeleteCountryApiV1CountriesCountryIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/countries/{country_id}/'
    });
};

/**
 * Read Ports From
 */
export const readPortsFromApiV1PortFromGet = <ThrowOnError extends boolean = false>(options?: Options<ReadPortsFromApiV1PortFromGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadPortsFromApiV1PortFromGetResponse, ReadPortsFromApiV1PortFromGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-from/'
    });
};

/**
 * Create New Port From
 */
export const createNewPortFromApiV1PortFromPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewPortFromApiV1PortFromPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateNewPortFromApiV1PortFromPostResponse, CreateNewPortFromApiV1PortFromPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-from/'
    });
};

/**
 * Read Port From
 */
export const readPortFromApiV1PortFromPortFromIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPortFromApiV1PortFromPortFromIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadPortFromApiV1PortFromPortFromIdGetResponse, ReadPortFromApiV1PortFromPortFromIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-from/{port_from_id}/'
    });
};

/**
 * Update Existing Port From
 */
export const updateExistingPortFromApiV1PortFromPortFromIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingPortFromApiV1PortFromPortFromIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateExistingPortFromApiV1PortFromPortFromIdPutResponse, UpdateExistingPortFromApiV1PortFromPortFromIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-from/{port_from_id}/'
    });
};

/**
 * Delete Existing Port From
 */
export const deleteExistingPortFromApiV1PortFromPortFromIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteExistingPortFromApiV1PortFromPortFromIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteExistingPortFromApiV1PortFromPortFromIdDeleteResponse, DeleteExistingPortFromApiV1PortFromPortFromIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-from/{port_from_id}/'
    });
};

/**
 * Read Ports To
 */
export const readPortsToApiV1PortToGet = <ThrowOnError extends boolean = false>(options?: Options<ReadPortsToApiV1PortToGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadPortsToApiV1PortToGetResponse, ReadPortsToApiV1PortToGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-to/'
    });
};

/**
 * Create Port To
 */
export const createPortToApiV1PortToPost = <ThrowOnError extends boolean = false>(options: Options<CreatePortToApiV1PortToPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePortToApiV1PortToPostResponse, CreatePortToApiV1PortToPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-to/'
    });
};

/**
 * Read Port To
 */
export const readPortToApiV1PortToPortToIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadPortToApiV1PortToPortToIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadPortToApiV1PortToPortToIdGetResponse, ReadPortToApiV1PortToPortToIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-to/{port_to_id}'
    });
};

/**
 * Update Port To
 */
export const updatePortToApiV1PortToPortToIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePortToApiV1PortToPortToIdPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdatePortToApiV1PortToPortToIdPutResponse, UpdatePortToApiV1PortToPortToIdPutError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-to/{port_to_id}/'
    });
};

/**
 * Delete Port To
 */
export const deletePortToApiV1PortToPortToIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePortToApiV1PortToPortToIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePortToApiV1PortToPortToIdDeleteResponse, DeletePortToApiV1PortToPortToIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/port-to/{port_to_id}/'
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponse, RootGetError, ThrowOnError>({
        ...options,
        url: '/'
    });
};